@page "/GestionarProducto"
@using BlazorEFUdemy.Modelo
@using BlazorEFUdemy.Servicios
@inject IServicioProducto servicioProducto

<h3>Gestionar Producto</h3>

<div class="form-group row">
    <div class="col-sm-10">
        <a href="/NuevoProducto" class="btn btn-primary m-1">Nuevo Producto</a>
    </div>
</div>

@if (listaProductos.Count == 0)
{
    <p class="text-danger"> No hay productos disponibles</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><strong>Producto</strong></th>
                <th><strong>Precio</strong></th>
                <th><strong>Tipo de Producto</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in listaProductos)
            {
                <tr>
                    <td>@producto.Descripcion</td>
                    <td>@producto.Precio.ToString() $</td>
                    <td>@producto.TipoProducto.Tipo</td>
                    <td>
                        <a href="@($"ModificarProducto/{producto.Id}")" class="btn btn-primary m-1">Modificar</a>
                    </td>
                    <td>
                        <input type="submit" class="btn btn-danger" value="Eliminar" @onclick="(() => DarDeBaja(producto.Id))" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {

    List<Producto> listaProductos = new List<Producto>();

    protected override async Task OnInitializedAsync()
    {
        listaProductos = (await servicioProducto.DameProductos()).ToList();
        StateHasChanged();
    }

    private async void DarDeBaja(int idProducto)
    {
        await servicioProducto.EliminarProducto(idProducto);
        listaProductos = (await servicioProducto.DameProductos()).ToList();
        StateHasChanged();
    }

}
