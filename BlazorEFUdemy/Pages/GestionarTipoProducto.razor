@page "/GestionarTipoProducto"
@inject IServicioTipoProducto servicioTipoProducto
@using BlazorEFUdemy.Modelo
@using BlazorEFUdemy.Servicios
<h3>Gestionar Tipo Producto</h3>

<EditForm Model="@tipoProducto" OnValidSubmit="HandleValidSubmit">
    <div class="form-group row">
        <label for="TipoProducto" class="col-sm-2 col-form-label">
            Selecciona el tipo de producto a modificar:
        </label>
        <div class="col-sm-10">
            <InputSelect id="TipoProducto" class="form-control" @bind-Value="opcionSeleccionada" @oninput="cambioElemento" >
                <option value="">Selecciona un tipo de producto</option>
                @foreach (var tipo in listaTiposProducto)
                {
                    <option value="@tipo.Id">@tipo.Tipo</option>
                }
            </InputSelect>
            </div>
    </div>

    <div class="form-group row">
        <label for="Tipo" class="col-sm-2 col-form-label">
            Tipo Producto: 
        </label>
        <div class="col-sm-10">
            <InputText id="nombre" class="form-control" placeholder="Dime el tipo de producto"
            @bind-Value="tipoProducto.Tipo" />
        </div>
    </div>
    <br />
    <div class="col-sm-5 m-3">
        <input type="submit" class="form-control col-12 btn btn-primary" value="Alta/modificación tipo de producto" @onclick="AltaTipoProducto">Alta Tipo Producto</input>
    </div>
    <div class="col-sm-5 m-3">
        <input type="submit" class="form-control col-12 btn btn-danger" value="Eliminar tipo de producto" @onclick="BorrarTipoProducto">Borrar Tipo Producto</input>
    </div>
    <div class="form-group row">
        <div class="col-sm-10">
            <label>@resultado</label>
        </div>
    </div>
</EditForm>

@code {
    public TipoProducto tipoProducto = new TipoProducto();
    public TipoProducto tipoProductoSeleccionado = new TipoProducto();
    public List<TipoProducto> listaTiposProducto = new List<TipoProducto>();
    public string resultado = "";
    private string opcionSeleccionada = "0";

    // Método que se ejecuta al cargar la página 
    // Y lo que hace es cargar la lista de tipos de productos
    protected override async Task OnInitializedAsync()
    {
        listaTiposProducto = (await servicioTipoProducto.DameTiposProductos()).ToList();
    }

    private async void AltaTipoProducto()
    {
        try
        {
            // Si el tipo de producto devuelve null es que no existe y lo damos de alta
            if(await servicioTipoProducto.DameTipoProducto(tipoProducto.Id) == null)
            {
                await servicioTipoProducto.AltaTipoProducto(tipoProducto);
                resultado = "Tipo de producto dado de alta correctamente";
            }
            else
            {
                await servicioTipoProducto.ModificarTipoProducto(tipoProducto);
                resultado = "Tipo de producto modificado correctamente";
            }
        }
        catch (Exception ex)
        {

            resultado= "Se produjo un error: " + ex.ToString();
            // Para forzar la actualización de la vista
            StateHasChanged();
        }
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("Valid submit");
    }

    private async void cambioElemento(ChangeEventArgs e)
    {
        if(e.Value.ToString() != "0")
        {
            tipoProductoSeleccionado = await servicioTipoProducto.DameTipoProducto(Convert.ToInt32(e.Value.ToString()));
            tipoProducto = tipoProductoSeleccionado;
        }
        else
        {
            tipoProducto = new TipoProducto();
        }
        StateHasChanged();
    }
    private async void BorrarTipoProducto(MouseEventArgs e)
    {      
        try
        {
            if (await servicioTipoProducto.DameTipoProducto(tipoProducto.Id) != null)
            {
                await servicioTipoProducto.BorrarTipoProducto(tipoProducto.Id);
                resultado = "Tipo de producto eliminado correctamente";
            }
            else
            {
                resultado = "El tipo de producto no existe";
            }
        }
        catch (Exception ex)
        {
            resultado = "Se produjo un error: " + ex.ToString();
        }

        listaTiposProducto = (await servicioTipoProducto.DameTiposProductos()).ToList();
        StateHasChanged();

    }
}
