@page "/GestionarVentas/{IdTienda:int}"
@using BlazorEFUdemy.Modelo
@using BlazorEFUdemy.Servicios
@inject IServicioTienda servicioTienda
@inject IServicioProducto servicioProducto
@inject IServicioProductoTienda servicioProductoTienda
@inject NavigationManager NavigationManager
@inject IServicioVenta servicioVenta

<h3>Gestionar Ventas - <strong> @tienda.Nombre </strong></h3>
<EditForm Model="venta" OnValidSubmit="HandleValidSubmit">
    <div class="form-group row">
        <label for="" class="col-sm-2 col-form-label">Producto seleccionado:</label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="opcionSeleccionada" class="form-control" @oninput="cambioElemento">
                <option value="0">Seleccione un producto</option>
                @foreach (var producto in listaProductos)
                {
                    <option value="@producto.Id">@producto.Descripcion</option>
                }
            </InputSelect>
        </div>
        <label for="PrecioVenta" class="col-sm-2 col-form-label">
            Precio Venta:
        </label>
        <div class="col-sm-10">
            <InputNumber Step="0.01" id="PrecioVenta" class="form-control" placeholder="Precio de venta"
            @bind-Value="venta.PrecioVenta" />

        </div>
        <label for="Cantidad" class="col-sm-2 col-form-label">
            Cantidad:
        </label>
        <div class="col-sm-10">
            <InputNumber id="Cantidad" class="form-control" placeholder="Cantidad"
            @bind-Value="venta.Cantidad" />
        </div>
        <div class="row content">
            <div class="col-md-1">
                <input type="submit" class="btn btn-success" value="Guardar" />
            </div>
            <div class="col-md-2">
                <input type="button" value="Cancelar" class="btn btn-danger" @onclick="Cancelar" />
            </div>
        </div>
        <div class="row content">
            @resultado
        </div>
    </div>
</EditForm>

@if (listaVentas.Count == 0)
{
    <p class="text-danger">No hay ventas efectuadas</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><strong>ID Venta</strong></th>
                <th><strong>Producto</strong></th>
                <th><strong>Precio de Compra</strong></th>
                <th><strong>Tipo de Producto</strong></th>
                <th><strong>Cantidad</strong></th>
                <th><strong>Precio Venta</strong></th>
                <th><strong>Total</strong></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (listaVentas != null)
            {
                @foreach (Venta ventas in listaVentas)
                {
                    <tr>
                        <td>@ventas.Id.ToString()</td>
                        <td>@ventas.Producto.Descripcion</td>
                        <td>@ventas.Producto.Precio.ToString() $</td>
                        <td>@ventas.Producto.TipoProducto.Tipo</td>
                        <td>@ventas.Cantidad</td>
                        <td>@ventas.PrecioVenta.ToString() $</td>
                        <td>@Math.Round(ventas.PrecioVenta * ventas.Cantidad, 2) $</td>
                        <td>
                            <input type="submit" class="btn btn-danger" value="Anular" @onclick="(() => OnDelete(ventas.Id))" />
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">No hay ventas disponibles</td>
                </tr>
            }
        </tbody>
    </table>
}

@if(Show)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: @(Show ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Aviso</h5>
                </div>
                <div class="modal-body">
                    <p>¿ Estas seguro que deseas continuar ? Esta accion es irreversible.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="@(()=> DarDeBaja())">OK</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="@(()=> this.Show = false)">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int IdTienda { get; set; }
    Tienda tienda = new Tienda();
    List<Producto> listaProductos = new List<Producto>();
    Producto producto = new Producto();
    Venta venta = new Venta();
    List<Venta> listaVentas = new List<Venta>();
    String opcionSeleccionada = "0";
    String resultado = String.Empty;
    
    public bool Show { get; set; } = false;
    int idVentaAux = -1;


    private void OnDelete(int idVenta)
    {
        this.Show = true;
        idVentaAux = idVenta;
    }


    protected override async Task OnInitializedAsync()
    {
        tienda = await servicioTienda.DameTienda(IdTienda);
        listaProductos = (await servicioProducto.DameProductos()).ToList();
        listaVentas = (await servicioVenta.DameVentas(tienda)).ToList();
        StateHasChanged();
    }

    public void HandleValidSubmit()
    {
        var editContext = new EditContext(venta);
        var isValid = editContext.Validate();
        if (!isValid)
        {
            StateHasChanged();
        }
        else
        {
            Guardar();
        }
    }

    private async void cambioElemento(ChangeEventArgs e)
    {
        if (e.Value.ToString() != "0")
        {
            producto = await servicioProducto.DameProducto(Convert.ToInt32(e.Value));
        }
        else
        {
            producto = new Producto();
        }
        StateHasChanged();
    }
    protected async Task Guardar()
    {
        try
        {
            if (opcionSeleccionada != "0")
            {
                venta.Producto = producto;
                venta.ProductoId = producto.Id;
                venta.TiendaId = tienda.Id;
                venta.Tienda = tienda;
                venta.FechaVenta = DateTime.Now;
                await servicioVenta.GestionarVentas(venta);
                listaVentas = (await servicioVenta.DameVentas(tienda)).ToList();
            }
            else
            {
                resultado = "Seleccione un producto";
            }
            venta = new Venta();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            resultado = "Se produjo un error: " + ex.Message.ToString();
            StateHasChanged();
        }
    }

    protected async void DarDeBaja()
    {
        try
        {
            await servicioVenta.AnularVenta(idVentaAux);
            listaVentas = (await servicioVenta.DameVentas(tienda)).ToList();
            this.Show = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            resultado = "Se produjo un error: " + ex.Message.ToString();
            StateHasChanged();
        }
    }


    protected void Cancelar()
    {
        NavigationManager.NavigateTo("/GestionarTienda");
    }
}